@page "/calculation"
@using SmartCut.Shared.Models
@using SmartCut.Shared.Resources.Localization
@using SmartCut.Shared.Services
@using SmartCut.Shared.Layout.Components
@using SmartCut.Shared.Models.ViewModels
@inject BreadcrumbService BreadcrumbService
@inject NotificationService NotificationService
@inject ApiClient CalculationService
<div class="card">
    <div class="card-overlay"></div>
    <div class="card-inner">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="card-title mb-0">
                @Localizer.Get("Calculation")
            </h3>
        </div>
        <div class="card-body btn-container">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 col-md-12">
                        @if (Blocks != null)
                        {
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">@Localizer.Get("Block Name")</th>
                                        <th scope="col">@Localizer.Get("Width")</th>
                                        <th scope="col">@Localizer.Get("Length")</th>
                                        <th scope="col">@Localizer.Get("Height")</th>
                                        <th scope="col">@Localizer.Get("Material")</th>
                                        <th scope="col">@Localizer.Get("Description")</th>
                                        <th scope="col">@Localizer.Get("Created At")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var block in Blocks)
                                    {
                                        <tr>
                                            <td style="text-align:center;justify-content:center">
                                                <input type="checkbox"
                                                       checked="@(SelectedBlock == block)"
                                                       @onchange="e => OnBlockChanged(block, e)" />
                                            </td>

                                            <td>@block.Name</td>
                                            <td>@block.Width</td>
                                            <td>@block.Length</td>
                                            <td>@block.Height</td>
                                            <td>@block.Material</td>
                                            <td>@block.Description</td>
                                            <td>@block.CreatedAt.ToString("g")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="col-lg-6 col-md-12">
                        @if (Orders != null)
                        {
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">@Localizer.Get("Invoice Number")</th>
                                        <th scope="col">@Localizer.Get("Line")</th>
                                        <th scope="col">@Localizer.Get("Width")</th>
                                        <th scope="col">@Localizer.Get("Length")</th>
                                        <th scope="col">@Localizer.Get("Height")</th>
                                        <th scope="col">@Localizer.Get("Quantity")</th>
                                        <th scope="col">@Localizer.Get("Product Code")</th>
                                        <th scope="col">@Localizer.Get("Product Name")</th>
                                        <th scope="col">@Localizer.Get("Customer Code")</th>
                                        <th scope="col">@Localizer.Get("Customer Name")</th>
                                        <th scope="col">@Localizer.Get("Description")</th>
                                        <th scope="col">@Localizer.Get("Created At")</th>
                                        <th scope="col">@Localizer.Get("Add")</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in Orders)
                                    {
                                        <tr>
                                            <td>@order.InvoiceNumber</td>
                                            <td>@order.Line</td>
                                            <td>@order.Width</td>
                                            <td>@order.Length</td>
                                            <td>@order.Height</td>
                                            <td>@order.Quantity</td>
                                            <td>@order.StockCode</td>
                                            <td>@order.StockName</td>
                                            <td>@order.CustomerCode</td>
                                            <td>@order.CustomerName</td>
                                            <td>@order.Description</td>
                                            <td>@order.CreatedAt</td>
                                            <td><button class="btn btn-success" @onclick="() => AddOrderToCalculation(order)">@Localizer.Get("Add")</button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
           
            <ActionButton actionType="6" OnClicked="CalculateAsync" />
        </div>
    </div>
</div>


@code {
    private IEnumerable<SmartCut.Shared.Models.Block>? Blocks { get; set; }
    private SmartCut.Shared.Models.Block? SelectedBlock { get; set; }
    private IEnumerable<OrderLine>? Orders { get; set; } = new List<OrderLine>();
    private List<OrderLine> SelectedOrders { get; set; } = new List<OrderLine>();
    private List<long> SelectedOrderIds { get; set; } = new List<long>();
    private CuttingPlan? CuttingPlan { get; set; }
    private string lonelyMessage = Localizer.Get("Loading...");
    protected override async Task OnInitializedAsync()
    {
        BreadcrumbService.SetBreadcrumbs(new List<BreadcrumbItem>
        {
            new() { Title = Localizer.Get("Home"), Url = "/", IsActive = false },
            new() { Title = Localizer.Get("Calculation"), Url = "/calculation", IsActive = true }

        });

        Blocks = await CalculationService.GetBlocksAsync(1,10,string.Empty,string.Empty,string.Empty);

        Orders = await CalculationService.GetOrdersAsync(1, 10, string.Empty, 0, string.Empty, string.Empty, string.Empty, string.Empty);
    }
    private void OnBlockChanged(SmartCut.Shared.Models.Block block, ChangeEventArgs e)
    {
        bool isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            // only this block is selected
            SelectedBlock = block;
        }
        else
        {
            // unchecking clears selection
            if (SelectedBlock == block)
                SelectedBlock = null;
        }
    }
    private async Task AddOrderToCalculation(OrderLine order)
    {
        if(order == null)
            return;
        if(SelectedOrders.Contains(order))
            return;

        SelectedOrders.Add(order);
        SelectedOrderIds.Add(order.Id);
        await Task.CompletedTask;
    }
    private async Task CalculateAsync()
    {
        try
        {

            if(SelectedBlock == null)
            {
                NotificationService.ShowError(Localizer.Get("Please select a block first."));
                return;
            }
            if(SelectedOrders == null)
            {
                NotificationService.ShowError(Localizer.Get("Please select order."));
                return;
            }
            if(SelectedOrders.Count == 0)
            {
                NotificationService.ShowError(Localizer.Get("Please select order."));
                return;
            }
            CalculationDTO calculationDTO = new CalculationDTO
            {
                BlockId = SelectedBlock.Id,
                OrderLineIDs = SelectedOrderIds.ToList()
            };
            var result = await CalculationService.CalculateCuttingPlanAsync(calculationDTO);
            CuttingPlan = await CalculationService.GetCuttingPlanAsync(result.Id);
            if(cuttingPlan == null)
            {
                NotificationService.ShowError(Localizer.Get("An error occurred while calculating."));
                return;
            }

        }
        catch (Exception)
        {
            NotificationService.ShowError(Localizer.Get("An error occurred while calculating."));
        }
    }


}
