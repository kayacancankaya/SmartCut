@page "/positions3d/{CuttingPlanId:int}"
@using SmartCut.Shared.Models
@using SmartCut.Shared.Models.DTOs
@using SmartCut.Shared.Models.ViewModels
@using SmartCut.Shared.Services
@using SmartCut.Shared.Resources.Localization
@implements IDisposable
@inject NotificationService NotificationService
@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject ApiClient DataService
@inject IJSRuntime JS

<h3>3D Positions View</h3>

<div id="three-container" style="width: 100%;
        height: 600px;border:1px solid #ccc;"></div>
<!-- tooltip injected / managed by JS, but keep a placeholder for CSS to apply -->
<div id="three-tooltip" style="display:none;"></div>

<button @onclick="Reload">Reload</button>
@* <button @onclick="DisposeJs">Destroy Viewer</button>
 *@
@code {
    // Replace this with DB loaded data in real usage
    [Parameter]
    public int CuttingPlanId { get; set; }
    private List<Position> Positions = new List<Position>();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            BreadcrumbService.SetBreadcrumbs(new List<BreadcrumbItem>
            {
                new() { Title = Localizer.Get("Home"), Url = "/", IsActive = false },
                new() { Title = Localizer.Get("Plans"), Url = "/calculation", IsActive = false },
                new() { Title = Localizer.Get("Plan List"), Url = "/list-calculations", IsActive = false },
                new() { Title = Localizer.Get("Visualize Result"), Url = $"/positions3d/{CuttingPlanId}", IsActive = true }

            });
            CuttingPlanDTO cuttingPlan = await DataService.GetCuttingPlanByIdAsync(CuttingPlanId);
            if (cuttingPlan == null)
            {
                NotificationService.ShowError(Localizer.Get("Cutting plan not found."));
                NavigationManager.NavigateTo("/list-calculations");
                return;
            }
            else if(cuttingPlan.CutEntries == null)
            {
                NotificationService.ShowError(Localizer.Get("No cut entries found in the cutting plan."));
                NavigationManager.NavigateTo("/list-calculations");
               return;
            }
            else if(cuttingPlan.CutEntries.Count == 0)
            {
                NotificationService.ShowError(Localizer.Get("No cut entries found in the cutting plan."));
                NavigationManager.NavigateTo("/list-calculations");
               return;
            }
            foreach(var item in cuttingPlan.CutEntries)
            {
                if(item.Positions != null)
                {
                    if(item.Positions.Count > 0)
                        foreach(var pos in item.Positions)
                            Positions.Add(pos);
                }
            }
            await JS.InvokeVoidAsync("renderPositions3D", Positions);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError(Localizer.Get("An error occurred while visualizing result."));
            await JS.InvokeVoidAsync("destroyPositions3D");
            NavigationManager.NavigateTo("/list-calculations");
        }
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // First time render
    //         await JS.InvokeVoidAsync("renderPositions3D", Positions);
    //     }
    // }

    private async Task Reload()
    {
        // call again after potential data change
        await JS.InvokeVoidAsync("renderPositions3D", Positions);
    }

    private async Task DisposeJs()
    {
        await JS.InvokeVoidAsync("destroyPositions3D");
    }
    public void Dispose()
    {
        // ✅ Automatically called when navigating away
        _ = JS.InvokeVoidAsync("destroyPositions3D");
    }
}
